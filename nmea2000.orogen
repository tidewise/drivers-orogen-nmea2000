# frozen_string_literal: true

name 'nmea2000'

import_types_from 'std'

import_types_from 'ais_base'
import_types_from 'canbus'
import_types_from 'tank_base'

using_task_library 'iodrivers_base'

using_library 'nmea2000'
import_types_from 'nmea2000/Message.hpp'
import_types_from 'nmea2000/Receiver.hpp'
import_types_from 'nmea2000Types.hpp'

typekit do
    export_types "/nmea2000/Humidity"
end

task_context 'CANTask' do
    needs_configuration

    # CAN message received by the bus
    input_port('can_in', '/canbus/Message')
        .needs_reliable_connection

    # CAN messages sent to the bus
    output_port 'can_out', '/canbus/Message'

    # Whether we should continue enumerating devices even after the devices
    # we do care about have been resolved
    property 'continuous_device_enumeration', '/bool', false

    # Expected devices with the name of the ports on which specific messages
    # should be sent
    property 'devices', '/std/vector</nmea2000/DeviceFilter>'

    # How long the component should take before giving up on resolving
    # devices listed in 'devices'. The component emits the QUERY_TIMED_OUT
    # event when it occurs, but continues operation
    property 'resolution_timeout', '/base/Time'

    # How long between the component queries product information when device
    # resolution is needed
    property 'enumeration_ack_timeout', '/base/Time'

    # Dispatched messages as set up by the 'devices' property
    dynamic_output_port(/\w+/, '/nmea2000/Message')

    # All the received N2K messages
    output_port 'messages', '/nmea2000/Message'

    # Address claims
    output_port 'device_information', '/nmea2000/Receiver/DeviceInfo'

    # Devices listed in 'devices' that have been resolved to their bus ID
    output_port 'resolved_devices', '/nmea2000/ResolvedDevice'

    port_driven

    runtime_states 'QUERY_IN_PROGRESS', 'QUERY_COMPLETE', 'QUERY_TIMED_OUT'
end

task_context 'ActisenseTask', subclasses: 'iodrivers_base::Task' do
    needs_configuration

    # Expected devices with the name of the ports on which specific messages
    # should be sent
    property 'devices', '/std/vector</nmea2000/DeviceFilter>'

    # How long the component should take before giving up on resolving
    # devices listed in 'devices'. The component emits the QUERY_TIMED_OUT
    # event when it occurs, but continues operation
    property 'resolution_timeout', '/base/Time'

    # How long between the component queries product information when device
    # resolution is needed
    property 'enumeration_ack_timeout', '/base/Time'

    # Dispatched messages as set up by the 'devices' property
    dynamic_output_port(/\w+/, '/nmea2000/Message')

    # All the received N2K messages
    output_port 'messages', '/nmea2000/Message'

    # Devices listed in 'devices' that have been resolved to their bus ID
    output_port 'resolved_devices', '/nmea2000/ResolvedDevice'

    runtime_states 'QUERY_IN_PROGRESS', 'QUERY_COMPLETE', 'QUERY_TIMED_OUT'
end

task_context 'AISTask' do
    needs_configuration

    input_port 'msg_in', '/nmea2000/Message'

    output_port 'vessel_position', '/ais_base/Position'
    output_port 'vessel_information', '/ais_base/VesselInformation'
    output_port 'voyage_information', '/ais_base/VoyageInformation'
    port_driven
end

task_context 'AirmarDST800Task' do
    needs_configuration

    input_port 'msg_in', '/nmea2000/Message'

    property 'sensor_frame', 'string', 'depth_sounder'
    property 'water_frame', 'string', 'water'
    property 'ground_frame', 'string', 'ground'
    # Max depth that can be reported by the sensor
    #
    # This overrides the range embedded in the NMEA2000 PGNs, which seems
    # to be invalid in the Airmar case
    property "range", "double", 500

    output_port 'speed_samples', '/base/samples/RigidBodyState'
    output_port 'depth_samples', '/base/samples/RigidBodyState'
    output_port 'temperature_samples', '/base/Temperature'
    port_driven
end

task_context 'FluidLevelTask' do
    needs_configuration

    # Override the capacity coming from the NMEA2000 device
    #
    # It is used instead of the device-reported capacity if non-zero
    property "capacity", "/float", 0

    input_port 'msg_in', '/nmea2000/Message'

    output_port 'level_out', '/tank_base/FluidLevel'
    port_driven
end

task_context 'YatchYDHS01Task' do
    needs_configuration

    property "id", "/int"

    input_port 'msg_in', '/nmea2000/Message'

    output_port 'temperature', '/base/samples/Temperature'
    output_port 'relative_humidity', '/nmea2000/Humidity'
    output_port 'dew_temperature', '/base/samples/Temperature'
    port_driven
end
